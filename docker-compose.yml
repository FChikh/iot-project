networks:
  default:
    driver: bridge
    ipam:
      driver: default
  nextcloud:
    driver: bridge
    internal: true
    ipam:
      driver: default

services:
  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    networks:
      - default
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
      - ./mosquitto/pwfile:/mosquitto/pwfile

  bridge:
    build: ./serial_mqtt_bridge
    container_name: bridge
    depends_on:
      - mosquitto
    devices:
      - "/dev:/dev"
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
    privileged: true
    links:
      - mosquitto
    tty: true

  dashboard:
    build: ./dashboard
    container_name: dashboard
    depends_on:
      - mosquitto
    ports:
      - "8501:8501"
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - TOKEN=${TOKEN}
      - SERIAL_PORT=/dev/ttyACM0
      - MQTT_BROKER=${MQTT_BROKER}
    privileged: true
    volumes:
      - ./config.json:/app/config.json
    links:
      - mosquitto


  influxdb:
    image: influxdb:2.0
    container_name: influxdb
    restart: unless-stopped
    volumes:
      - ./influxdb/data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=myorg
      - DOCKER_INFLUXDB_INIT_BUCKET=room_sensors  # Match your script's bucket name


  mqtt_to_influx:
    build: ./mqtt_to_influx
    container_name: mqtt_to_influx
    depends_on:
      - influxdb
      - mosquitto
    environment:
      - MQTT_BROKER=mosquitto
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - INFLUXDB_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=myorg
      - INFLUXDB_BUCKET=room_sensors  # Match your script's bucket name
    volumes:
      - ./mqtt_to_influx:/mqtt_to_influx
    command: python /mqtt_to_influx/mqtt_to_influx.py
    links:
      - influxdb
      - mosquitto


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - default


  # sensor_simulation:
  #     build: ./sensor_simulation
  #     container_name: sensor_simulation
  #     depends_on:
  #       - influxdb
  #     environment:
  #       - INFLUXDB_URL=http://influxdb:8086  # Use the service name 'influxdb'
  #       - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
  #       - INFLUXDB_ORG=myorg
  #       - INFLUXDB_BUCKET=room_sensors  # Match your script's bucket name
  #     volumes:
  #       - ./sensor_simulation:/app
  #     networks:
  #       - default
  #     restart: always


  restapi_rooms:
    build:
      context: ./restapi_rooms  # Replace with the path to your service's Dockerfile
      dockerfile: Dockerfile
    container_name: restapi_rooms
    depends_on:
      - influxdb
    ports:
      - "8080:8080"
    environment:
        - INFLUXDB_URL=http://influxdb:8086  # Use the service name 'influxdb'
        - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
        - INFLUXDB_ORG=myorg
        - INFLUXDB_BUCKET=room_sensors  # Match your script's bucket name
        - GOOGLE_CAL_ID=7e153f9a22e108db15281a9791412833960a6568cee592790c8bf4ee8b2518de@group.calendar.google.com # Calendar ID to get bookings
    volumes:
      - ./env/creds.json:/usr/src/app/creds.json:ro  # Read-only access to creds.json
    networks:
      - default
  

  static_data:
    build: ./static_data
    container_name: static_data
    volumes:
      - ./static_data/rooms.db:/app/rooms.db  # Persist database file
      - ./static_data:/app                   # Mount code for flexibility
    command: python init_db.py               # Initialize database on startup
    networks:
      - default