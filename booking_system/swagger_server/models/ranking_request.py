# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RankingRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: date=None, start_time: str=None, end_time: str=None, seating_capacity: int=None, videoprojector_needed: bool=False, computers_required: bool=False, air_quality_preference: str='normal', noise_level: str='normal', lighting: str='normal'):  # noqa: E501
        """RankingRequest - a model defined in Swagger

        :param _date: The _date of this RankingRequest.  # noqa: E501
        :type _date: date
        :param start_time: The start_time of this RankingRequest.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this RankingRequest.  # noqa: E501
        :type end_time: str
        :param seating_capacity: The seating_capacity of this RankingRequest.  # noqa: E501
        :type seating_capacity: int
        :param videoprojector_needed: The videoprojector_needed of this RankingRequest.  # noqa: E501
        :type videoprojector_needed: bool
        :param computers_required: The computers_required of this RankingRequest.  # noqa: E501
        :type computers_required: bool
        :param air_quality_preference: The air_quality_preference of this RankingRequest.  # noqa: E501
        :type air_quality_preference: str
        :param noise_level: The noise_level of this RankingRequest.  # noqa: E501
        :type noise_level: str
        :param lighting: The lighting of this RankingRequest.  # noqa: E501
        :type lighting: str
        """
        self.swagger_types = {
            '_date': date,
            'start_time': str,
            'end_time': str,
            'seating_capacity': int,
            'videoprojector_needed': bool,
            'computers_required': bool,
            'air_quality_preference': str,
            'noise_level': str,
            'lighting': str
        }

        self.attribute_map = {
            '_date': 'date',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'seating_capacity': 'seating_capacity',
            'videoprojector_needed': 'videoprojector_needed',
            'computers_required': 'computers_required',
            'air_quality_preference': 'air_quality_preference',
            'noise_level': 'noise_level',
            'lighting': 'lighting'
        }
        self.__date = _date
        self._start_time = start_time
        self._end_time = end_time
        self._seating_capacity = seating_capacity
        self._videoprojector_needed = videoprojector_needed
        self._computers_required = computers_required
        self._air_quality_preference = air_quality_preference
        self._noise_level = noise_level
        self._lighting = lighting

    @classmethod
    def from_dict(cls, dikt) -> 'RankingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RankingRequest of this RankingRequest.  # noqa: E501
        :rtype: RankingRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> date:
        """Gets the _date of this RankingRequest.


        :return: The _date of this RankingRequest.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this RankingRequest.


        :param _date: The _date of this RankingRequest.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def start_time(self) -> str:
        """Gets the start_time of this RankingRequest.


        :return: The start_time of this RankingRequest.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this RankingRequest.


        :param start_time: The start_time of this RankingRequest.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this RankingRequest.


        :return: The end_time of this RankingRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this RankingRequest.


        :param end_time: The end_time of this RankingRequest.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def seating_capacity(self) -> int:
        """Gets the seating_capacity of this RankingRequest.


        :return: The seating_capacity of this RankingRequest.
        :rtype: int
        """
        return self._seating_capacity

    @seating_capacity.setter
    def seating_capacity(self, seating_capacity: int):
        """Sets the seating_capacity of this RankingRequest.


        :param seating_capacity: The seating_capacity of this RankingRequest.
        :type seating_capacity: int
        """
        if seating_capacity is None:
            raise ValueError("Invalid value for `seating_capacity`, must not be `None`")  # noqa: E501

        self._seating_capacity = seating_capacity

    @property
    def videoprojector_needed(self) -> bool:
        """Gets the videoprojector_needed of this RankingRequest.


        :return: The videoprojector_needed of this RankingRequest.
        :rtype: bool
        """
        return self._videoprojector_needed

    @videoprojector_needed.setter
    def videoprojector_needed(self, videoprojector_needed: bool):
        """Sets the videoprojector_needed of this RankingRequest.


        :param videoprojector_needed: The videoprojector_needed of this RankingRequest.
        :type videoprojector_needed: bool
        """
        if videoprojector_needed is None:
            raise ValueError("Invalid value for `videoprojector_needed`, must not be `None`")  # noqa: E501

        self._videoprojector_needed = videoprojector_needed

    @property
    def computers_required(self) -> bool:
        """Gets the computers_required of this RankingRequest.


        :return: The computers_required of this RankingRequest.
        :rtype: bool
        """
        return self._computers_required

    @computers_required.setter
    def computers_required(self, computers_required: bool):
        """Sets the computers_required of this RankingRequest.


        :param computers_required: The computers_required of this RankingRequest.
        :type computers_required: bool
        """
        if computers_required is None:
            raise ValueError("Invalid value for `computers_required`, must not be `None`")  # noqa: E501

        self._computers_required = computers_required

    @property
    def air_quality_preference(self) -> str:
        """Gets the air_quality_preference of this RankingRequest.


        :return: The air_quality_preference of this RankingRequest.
        :rtype: str
        """
        return self._air_quality_preference

    @air_quality_preference.setter
    def air_quality_preference(self, air_quality_preference: str):
        """Sets the air_quality_preference of this RankingRequest.


        :param air_quality_preference: The air_quality_preference of this RankingRequest.
        :type air_quality_preference: str
        """
        allowed_values = ["high", "normal"]  # noqa: E501
        if air_quality_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `air_quality_preference` ({0}), must be one of {1}"
                .format(air_quality_preference, allowed_values)
            )

        self._air_quality_preference = air_quality_preference

    @property
    def noise_level(self) -> str:
        """Gets the noise_level of this RankingRequest.


        :return: The noise_level of this RankingRequest.
        :rtype: str
        """
        return self._noise_level

    @noise_level.setter
    def noise_level(self, noise_level: str):
        """Sets the noise_level of this RankingRequest.


        :param noise_level: The noise_level of this RankingRequest.
        :type noise_level: str
        """
        allowed_values = ["silent", "normal"]  # noqa: E501
        if noise_level not in allowed_values:
            raise ValueError(
                "Invalid value for `noise_level` ({0}), must be one of {1}"
                .format(noise_level, allowed_values)
            )

        self._noise_level = noise_level

    @property
    def lighting(self) -> str:
        """Gets the lighting of this RankingRequest.


        :return: The lighting of this RankingRequest.
        :rtype: str
        """
        return self._lighting

    @lighting.setter
    def lighting(self, lighting: str):
        """Sets the lighting of this RankingRequest.


        :param lighting: The lighting of this RankingRequest.
        :type lighting: str
        """
        allowed_values = ["bright", "normal"]  # noqa: E501
        if lighting not in allowed_values:
            raise ValueError(
                "Invalid value for `lighting` ({0}), must be one of {1}"
                .format(lighting, allowed_values)
            )

        self._lighting = lighting
