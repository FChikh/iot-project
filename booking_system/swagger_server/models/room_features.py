# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RoomFeatures(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, seating_capacity: int=None, has_videoprojector: bool=None, has_computers: bool=None, co2: float=None, pm2_5: float=None, pm10: float=None, voc: float=None, noise_level: float=None, lighting: float=None, humidity: float=None):  # noqa: E501
        """RoomFeatures - a model defined in Swagger

        :param seating_capacity: The seating_capacity of this RoomFeatures.  # noqa: E501
        :type seating_capacity: int
        :param has_videoprojector: The has_videoprojector of this RoomFeatures.  # noqa: E501
        :type has_videoprojector: bool
        :param has_computers: The has_computers of this RoomFeatures.  # noqa: E501
        :type has_computers: bool
        :param co2: The co2 of this RoomFeatures.  # noqa: E501
        :type co2: float
        :param pm2_5: The pm2_5 of this RoomFeatures.  # noqa: E501
        :type pm2_5: float
        :param pm10: The pm10 of this RoomFeatures.  # noqa: E501
        :type pm10: float
        :param voc: The voc of this RoomFeatures.  # noqa: E501
        :type voc: float
        :param noise_level: The noise_level of this RoomFeatures.  # noqa: E501
        :type noise_level: float
        :param lighting: The lighting of this RoomFeatures.  # noqa: E501
        :type lighting: float
        :param humidity: The humidity of this RoomFeatures.  # noqa: E501
        :type humidity: float
        """
        self.swagger_types = {
            'seating_capacity': int,
            'has_videoprojector': bool,
            'has_computers': bool,
            'co2': float,
            'pm2_5': float,
            'pm10': float,
            'voc': float,
            'noise_level': float,
            'lighting': float,
            'humidity': float
        }

        self.attribute_map = {
            'seating_capacity': 'seating_capacity',
            'has_videoprojector': 'has_videoprojector',
            'has_computers': 'has_computers',
            'co2': 'co2',
            'pm2_5': 'pm2_5',
            'pm10': 'pm10',
            'voc': 'voc',
            'noise_level': 'noise_level',
            'lighting': 'lighting',
            'humidity': 'humidity'
        }
        self._seating_capacity = seating_capacity
        self._has_videoprojector = has_videoprojector
        self._has_computers = has_computers
        self._co2 = co2
        self._pm2_5 = pm2_5
        self._pm10 = pm10
        self._voc = voc
        self._noise_level = noise_level
        self._lighting = lighting
        self._humidity = humidity

    @classmethod
    def from_dict(cls, dikt) -> 'RoomFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Room_features of this RoomFeatures.  # noqa: E501
        :rtype: RoomFeatures
        """
        return util.deserialize_model(dikt, cls)

    @property
    def seating_capacity(self) -> int:
        """Gets the seating_capacity of this RoomFeatures.


        :return: The seating_capacity of this RoomFeatures.
        :rtype: int
        """
        return self._seating_capacity

    @seating_capacity.setter
    def seating_capacity(self, seating_capacity: int):
        """Sets the seating_capacity of this RoomFeatures.


        :param seating_capacity: The seating_capacity of this RoomFeatures.
        :type seating_capacity: int
        """

        self._seating_capacity = seating_capacity

    @property
    def has_videoprojector(self) -> bool:
        """Gets the has_videoprojector of this RoomFeatures.


        :return: The has_videoprojector of this RoomFeatures.
        :rtype: bool
        """
        return self._has_videoprojector

    @has_videoprojector.setter
    def has_videoprojector(self, has_videoprojector: bool):
        """Sets the has_videoprojector of this RoomFeatures.


        :param has_videoprojector: The has_videoprojector of this RoomFeatures.
        :type has_videoprojector: bool
        """

        self._has_videoprojector = has_videoprojector

    @property
    def has_computers(self) -> bool:
        """Gets the has_computers of this RoomFeatures.


        :return: The has_computers of this RoomFeatures.
        :rtype: bool
        """
        return self._has_computers

    @has_computers.setter
    def has_computers(self, has_computers: bool):
        """Sets the has_computers of this RoomFeatures.


        :param has_computers: The has_computers of this RoomFeatures.
        :type has_computers: bool
        """

        self._has_computers = has_computers

    @property
    def co2(self) -> float:
        """Gets the co2 of this RoomFeatures.


        :return: The co2 of this RoomFeatures.
        :rtype: float
        """
        return self._co2

    @co2.setter
    def co2(self, co2: float):
        """Sets the co2 of this RoomFeatures.


        :param co2: The co2 of this RoomFeatures.
        :type co2: float
        """

        self._co2 = co2

    @property
    def pm2_5(self) -> float:
        """Gets the pm2_5 of this RoomFeatures.


        :return: The pm2_5 of this RoomFeatures.
        :rtype: float
        """
        return self._pm2_5

    @pm2_5.setter
    def pm2_5(self, pm2_5: float):
        """Sets the pm2_5 of this RoomFeatures.


        :param pm2_5: The pm2_5 of this RoomFeatures.
        :type pm2_5: float
        """

        self._pm2_5 = pm2_5

    @property
    def pm10(self) -> float:
        """Gets the pm10 of this RoomFeatures.


        :return: The pm10 of this RoomFeatures.
        :rtype: float
        """
        return self._pm10

    @pm10.setter
    def pm10(self, pm10: float):
        """Sets the pm10 of this RoomFeatures.


        :param pm10: The pm10 of this RoomFeatures.
        :type pm10: float
        """

        self._pm10 = pm10

    @property
    def voc(self) -> float:
        """Gets the voc of this RoomFeatures.


        :return: The voc of this RoomFeatures.
        :rtype: float
        """
        return self._voc

    @voc.setter
    def voc(self, voc: float):
        """Sets the voc of this RoomFeatures.


        :param voc: The voc of this RoomFeatures.
        :type voc: float
        """

        self._voc = voc

    @property
    def noise_level(self) -> float:
        """Gets the noise_level of this RoomFeatures.


        :return: The noise_level of this RoomFeatures.
        :rtype: float
        """
        return self._noise_level

    @noise_level.setter
    def noise_level(self, noise_level: float):
        """Sets the noise_level of this RoomFeatures.


        :param noise_level: The noise_level of this RoomFeatures.
        :type noise_level: float
        """

        self._noise_level = noise_level

    @property
    def lighting(self) -> float:
        """Gets the lighting of this RoomFeatures.


        :return: The lighting of this RoomFeatures.
        :rtype: float
        """
        return self._lighting

    @lighting.setter
    def lighting(self, lighting: float):
        """Sets the lighting of this RoomFeatures.


        :param lighting: The lighting of this RoomFeatures.
        :type lighting: float
        """

        self._lighting = lighting

    @property
    def humidity(self) -> float:
        """Gets the humidity of this RoomFeatures.


        :return: The humidity of this RoomFeatures.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this RoomFeatures.


        :param humidity: The humidity of this RoomFeatures.
        :type humidity: float
        """

        self._humidity = humidity
