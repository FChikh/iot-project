# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RoomFeatures(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, seating_capacity: int=None, projector: bool=None, computer_class: bool=None, blackboard: bool=None, microphone: bool=None, pc: bool=None, whiteboard: bool=None, air_quality_preference: str=None, noise_level: str=None, lighting: str=None):  # noqa: E501
        """RoomFeatures - a model defined in Swagger

        :param seating_capacity: The seating_capacity of this RoomFeatures.  # noqa: E501
        :type seating_capacity: int
        :param projector: The projector of this RoomFeatures.  # noqa: E501
        :type projector: bool
        :param computer_class: The computer_class of this RoomFeatures.  # noqa: E501
        :type computer_class: bool
        :param blackboard: The blackboard of this RoomFeatures.  # noqa: E501
        :type blackboard: bool
        :param microphone: The microphone of this RoomFeatures.  # noqa: E501
        :type microphone: bool
        :param pc: The pc of this RoomFeatures.  # noqa: E501
        :type pc: bool
        :param whiteboard: The whiteboard of this RoomFeatures.  # noqa: E501
        :type whiteboard: bool
        :param air_quality_preference: The air_quality_preference of this RoomFeatures.  # noqa: E501
        :type air_quality_preference: str
        :param noise_level: The noise_level of this RoomFeatures.  # noqa: E501
        :type noise_level: str
        :param lighting: The lighting of this RoomFeatures.  # noqa: E501
        :type lighting: str
        """
        self.swagger_types = {
            'seating_capacity': int,
            'projector': bool,
            'computer_class': bool,
            'blackboard': bool,
            'microphone': bool,
            'pc': bool,
            'whiteboard': bool,
            'air_quality_preference': str,
            'noise_level': str,
            'lighting': str
        }

        self.attribute_map = {
            'seating_capacity': 'seating_capacity',
            'projector': 'projector',
            'computer_class': 'computer_class',
            'blackboard': 'blackboard',
            'microphone': 'microphone',
            'pc': 'pc',
            'whiteboard': 'whiteboard',
            'air_quality_preference': 'air_quality_preference',
            'noise_level': 'noise_level',
            'lighting': 'lighting'
        }
        self._seating_capacity = seating_capacity
        self._projector = projector
        self._computer_class = computer_class
        self._blackboard = blackboard
        self._microphone = microphone
        self._pc = pc
        self._whiteboard = whiteboard
        self._air_quality_preference = air_quality_preference
        self._noise_level = noise_level
        self._lighting = lighting

    @classmethod
    def from_dict(cls, dikt) -> 'RoomFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Room_features of this RoomFeatures.  # noqa: E501
        :rtype: RoomFeatures
        """
        return util.deserialize_model(dikt, cls)

    @property
    def seating_capacity(self) -> int:
        """Gets the seating_capacity of this RoomFeatures.


        :return: The seating_capacity of this RoomFeatures.
        :rtype: int
        """
        return self._seating_capacity

    @seating_capacity.setter
    def seating_capacity(self, seating_capacity: int):
        """Sets the seating_capacity of this RoomFeatures.


        :param seating_capacity: The seating_capacity of this RoomFeatures.
        :type seating_capacity: int
        """

        self._seating_capacity = seating_capacity

    @property
    def projector(self) -> bool:
        """Gets the projector of this RoomFeatures.


        :return: The projector of this RoomFeatures.
        :rtype: bool
        """
        return self._projector

    @projector.setter
    def projector(self, projector: bool):
        """Sets the projector of this RoomFeatures.


        :param projector: The projector of this RoomFeatures.
        :type projector: bool
        """

        self._projector = projector

    @property
    def computer_class(self) -> bool:
        """Gets the computer_class of this RoomFeatures.


        :return: The computer_class of this RoomFeatures.
        :rtype: bool
        """
        return self._computer_class

    @computer_class.setter
    def computer_class(self, computer_class: bool):
        """Sets the computer_class of this RoomFeatures.


        :param computer_class: The computer_class of this RoomFeatures.
        :type computer_class: bool
        """

        self._computer_class = computer_class

    @property
    def blackboard(self) -> bool:
        """Gets the blackboard of this RoomFeatures.


        :return: The blackboard of this RoomFeatures.
        :rtype: bool
        """
        return self._blackboard

    @blackboard.setter
    def blackboard(self, blackboard: bool):
        """Sets the blackboard of this RoomFeatures.


        :param blackboard: The blackboard of this RoomFeatures.
        :type blackboard: bool
        """

        self._blackboard = blackboard

    @property
    def microphone(self) -> bool:
        """Gets the microphone of this RoomFeatures.


        :return: The microphone of this RoomFeatures.
        :rtype: bool
        """
        return self._microphone

    @microphone.setter
    def microphone(self, microphone: bool):
        """Sets the microphone of this RoomFeatures.


        :param microphone: The microphone of this RoomFeatures.
        :type microphone: bool
        """

        self._microphone = microphone

    @property
    def pc(self) -> bool:
        """Gets the pc of this RoomFeatures.


        :return: The pc of this RoomFeatures.
        :rtype: bool
        """
        return self._pc

    @pc.setter
    def pc(self, pc: bool):
        """Sets the pc of this RoomFeatures.


        :param pc: The pc of this RoomFeatures.
        :type pc: bool
        """

        self._pc = pc

    @property
    def whiteboard(self) -> bool:
        """Gets the whiteboard of this RoomFeatures.


        :return: The whiteboard of this RoomFeatures.
        :rtype: bool
        """
        return self._whiteboard

    @whiteboard.setter
    def whiteboard(self, whiteboard: bool):
        """Sets the whiteboard of this RoomFeatures.


        :param whiteboard: The whiteboard of this RoomFeatures.
        :type whiteboard: bool
        """

        self._whiteboard = whiteboard

    @property
    def air_quality_preference(self) -> str:
        """Gets the air_quality_preference of this RoomFeatures.


        :return: The air_quality_preference of this RoomFeatures.
        :rtype: str
        """
        return self._air_quality_preference

    @air_quality_preference.setter
    def air_quality_preference(self, air_quality_preference: str):
        """Sets the air_quality_preference of this RoomFeatures.


        :param air_quality_preference: The air_quality_preference of this RoomFeatures.
        :type air_quality_preference: str
        """
        allowed_values = ["high", "normal"]  # noqa: E501
        if air_quality_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `air_quality_preference` ({0}), must be one of {1}"
                .format(air_quality_preference, allowed_values)
            )

        self._air_quality_preference = air_quality_preference

    @property
    def noise_level(self) -> str:
        """Gets the noise_level of this RoomFeatures.


        :return: The noise_level of this RoomFeatures.
        :rtype: str
        """
        return self._noise_level

    @noise_level.setter
    def noise_level(self, noise_level: str):
        """Sets the noise_level of this RoomFeatures.


        :param noise_level: The noise_level of this RoomFeatures.
        :type noise_level: str
        """
        allowed_values = ["silent", "normal"]  # noqa: E501
        if noise_level not in allowed_values:
            raise ValueError(
                "Invalid value for `noise_level` ({0}), must be one of {1}"
                .format(noise_level, allowed_values)
            )

        self._noise_level = noise_level

    @property
    def lighting(self) -> str:
        """Gets the lighting of this RoomFeatures.


        :return: The lighting of this RoomFeatures.
        :rtype: str
        """
        return self._lighting

    @lighting.setter
    def lighting(self, lighting: str):
        """Sets the lighting of this RoomFeatures.


        :param lighting: The lighting of this RoomFeatures.
        :type lighting: str
        """
        allowed_values = ["bright", "normal"]  # noqa: E501
        if lighting not in allowed_values:
            raise ValueError(
                "Invalid value for `lighting` ({0}), must be one of {1}"
                .format(lighting, allowed_values)
            )

        self._lighting = lighting
