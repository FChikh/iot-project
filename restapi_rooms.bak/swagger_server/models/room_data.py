# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.air_quality10_reading import AirQuality10Reading  # noqa: F401,E501
from swagger_server.models.air_quality25_reading import AirQuality25Reading  # noqa: F401,E501
from swagger_server.models.co2_reading import Co2Reading  # noqa: F401,E501
from swagger_server.models.humidity_reading import HumidityReading  # noqa: F401,E501
from swagger_server.models.light_reading import LightReading  # noqa: F401,E501
from swagger_server.models.noise_reading import NoiseReading  # noqa: F401,E501
from swagger_server.models.temperature_reading import TemperatureReading  # noqa: F401,E501
from swagger_server.models.voc_reading import VocReading  # noqa: F401,E501
from swagger_server import util


class RoomData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, room: str=None, temperature: List[TemperatureReading]=None, pm2_5: List[AirQuality25Reading]=None, pm10: List[AirQuality10Reading]=None, co2: List[Co2Reading]=None, noise: List[NoiseReading]=None, voc: List[VocReading]=None, light: List[LightReading]=None, humidity: List[HumidityReading]=None):  # noqa: E501
        """RoomData - a model defined in Swagger

        :param room: The room of this RoomData.  # noqa: E501
        :type room: str
        :param temperature: The temperature of this RoomData.  # noqa: E501
        :type temperature: List[TemperatureReading]
        :param pm2_5: The pm2_5 of this RoomData.  # noqa: E501
        :type pm2_5: List[AirQuality25Reading]
        :param pm10: The pm10 of this RoomData.  # noqa: E501
        :type pm10: List[AirQuality10Reading]
        :param co2: The co2 of this RoomData.  # noqa: E501
        :type co2: List[Co2Reading]
        :param noise: The noise of this RoomData.  # noqa: E501
        :type noise: List[NoiseReading]
        :param voc: The voc of this RoomData.  # noqa: E501
        :type voc: List[VocReading]
        :param light: The light of this RoomData.  # noqa: E501
        :type light: List[LightReading]
        :param humidity: The humidity of this RoomData.  # noqa: E501
        :type humidity: List[HumidityReading]
        """
        self.swagger_types = {
            'room': str,
            'temperature': List[TemperatureReading],
            'pm2_5': List[AirQuality25Reading],
            'pm10': List[AirQuality10Reading],
            'co2': List[Co2Reading],
            'noise': List[NoiseReading],
            'voc': List[VocReading],
            'light': List[LightReading],
            'humidity': List[HumidityReading]
        }

        self.attribute_map = {
            'room': 'room',
            'temperature': 'temperature',
            'pm2_5': 'pm2_5',
            'pm10': 'pm10',
            'co2': 'co2',
            'noise': 'noise',
            'voc': 'voc',
            'light': 'light',
            'humidity': 'humidity'
        }
        self._room = room
        self._temperature = temperature
        self._pm2_5 = pm2_5
        self._pm10 = pm10
        self._co2 = co2
        self._noise = noise
        self._voc = voc
        self._light = light
        self._humidity = humidity

    @classmethod
    def from_dict(cls, dikt) -> 'RoomData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RoomData of this RoomData.  # noqa: E501
        :rtype: RoomData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def room(self) -> str:
        """Gets the room of this RoomData.

        Room identifier  # noqa: E501

        :return: The room of this RoomData.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room: str):
        """Sets the room of this RoomData.

        Room identifier  # noqa: E501

        :param room: The room of this RoomData.
        :type room: str
        """

        self._room = room

    @property
    def temperature(self) -> List[TemperatureReading]:
        """Gets the temperature of this RoomData.


        :return: The temperature of this RoomData.
        :rtype: List[TemperatureReading]
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: List[TemperatureReading]):
        """Sets the temperature of this RoomData.


        :param temperature: The temperature of this RoomData.
        :type temperature: List[TemperatureReading]
        """

        self._temperature = temperature

    @property
    def pm2_5(self) -> List[AirQuality25Reading]:
        """Gets the pm2_5 of this RoomData.


        :return: The pm2_5 of this RoomData.
        :rtype: List[AirQuality25Reading]
        """
        return self._pm2_5

    @pm2_5.setter
    def pm2_5(self, pm2_5: List[AirQuality25Reading]):
        """Sets the pm2_5 of this RoomData.


        :param pm2_5: The pm2_5 of this RoomData.
        :type pm2_5: List[AirQuality25Reading]
        """

        self._pm2_5 = pm2_5

    @property
    def pm10(self) -> List[AirQuality10Reading]:
        """Gets the pm10 of this RoomData.


        :return: The pm10 of this RoomData.
        :rtype: List[AirQuality10Reading]
        """
        return self._pm10

    @pm10.setter
    def pm10(self, pm10: List[AirQuality10Reading]):
        """Sets the pm10 of this RoomData.


        :param pm10: The pm10 of this RoomData.
        :type pm10: List[AirQuality10Reading]
        """

        self._pm10 = pm10

    @property
    def co2(self) -> List[Co2Reading]:
        """Gets the co2 of this RoomData.


        :return: The co2 of this RoomData.
        :rtype: List[Co2Reading]
        """
        return self._co2

    @co2.setter
    def co2(self, co2: List[Co2Reading]):
        """Sets the co2 of this RoomData.


        :param co2: The co2 of this RoomData.
        :type co2: List[Co2Reading]
        """

        self._co2 = co2

    @property
    def noise(self) -> List[NoiseReading]:
        """Gets the noise of this RoomData.


        :return: The noise of this RoomData.
        :rtype: List[NoiseReading]
        """
        return self._noise

    @noise.setter
    def noise(self, noise: List[NoiseReading]):
        """Sets the noise of this RoomData.


        :param noise: The noise of this RoomData.
        :type noise: List[NoiseReading]
        """

        self._noise = noise

    @property
    def voc(self) -> List[VocReading]:
        """Gets the voc of this RoomData.


        :return: The voc of this RoomData.
        :rtype: List[VocReading]
        """
        return self._voc

    @voc.setter
    def voc(self, voc: List[VocReading]):
        """Sets the voc of this RoomData.


        :param voc: The voc of this RoomData.
        :type voc: List[VocReading]
        """

        self._voc = voc

    @property
    def light(self) -> List[LightReading]:
        """Gets the light of this RoomData.


        :return: The light of this RoomData.
        :rtype: List[LightReading]
        """
        return self._light

    @light.setter
    def light(self, light: List[LightReading]):
        """Sets the light of this RoomData.


        :param light: The light of this RoomData.
        :type light: List[LightReading]
        """

        self._light = light

    @property
    def humidity(self) -> List[HumidityReading]:
        """Gets the humidity of this RoomData.


        :return: The humidity of this RoomData.
        :rtype: List[HumidityReading]
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: List[HumidityReading]):
        """Sets the humidity of this RoomData.


        :param humidity: The humidity of this RoomData.
        :type humidity: List[HumidityReading]
        """

        self._humidity = humidity
