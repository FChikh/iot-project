openapi: 3.0.0
info:
  title: Room Sensors API
  description: "API for retrieving data from different rooms (sensors, equipment,\
    \ bookings)"
  version: 1.0.0
servers:
- url: http://localhost:8087
  description: Room Sensors
paths:
  /book/{room_id}:
    post:
      summary: Book a specific room
      description: Book a 30-minute time slot for a specific room.
      operationId: book_room_id_post
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book_room_id_body'
        required: true
      responses:
        "200":
          description: Booking successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "409":
          description: Room is already booked for the given time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /equipment/rooms:
    get:
      summary: Get information about the equipment in each room
      description: "Retrieve the equipment status of each room, such as amount of\
        \ seats, if there is a projector, etc."
      operationId: equipment_rooms_get
      responses:
        "200":
          description: A JSON object which contains for every room another object
            stating the status of equipment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomEquipment'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /equipment/{room_id}:
    get:
      summary: Get the available equipment for a specific room
      description: "Fetches information/data about the equipment of a specific room,\
        \ such as capacity, if it has a projector etc."
      operationId: equipment_room_id_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomEquipment'
        "404":
          description: No equipment data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /sensor/rooms:
    get:
      summary: Get sensor data for all rooms
      description: Retrieve all sensor data for all rooms
      operationId: sensor_rooms_get
      responses:
        "200":
          description: A JSON array of rooms with their sensor data captured the past
            2 Weeks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomData'
                x-content-type: application/json
        "404":
          description: No sensor data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /sensor/{room_id}:
    get:
      summary: Get sensor data for a specific room
      description: Retrieve all sensor data for a specific room
      operationId: sensor_room_id_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomData'
        "404":
          description: No sensor data found for room room_id
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/aq_pm2_5:
    get:
      summary: Retrieve air quality data (pm2.5)
      description: "Fetches the air quality measurement, including particulate matter\
        \ (μg/m³) for smaller particles(i.e. pm2.5) for all rooms"
      operationId: rooms_aq_pm2_5_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomAirQuality25'
                x-content-type: application/json
        "404":
          description: No airquality data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/aq_pm10:
    get:
      summary: Retrieve air quality data (pm10)
      description: "Fetches the air quality measurement, including particulate matter\
        \ (μg/m³) for smaller particles(i.e. pm10) for all rooms"
      operationId: rooms_aq_pm10_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomAirQuality10'
                x-content-type: application/json
        "404":
          description: No airquality data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/temperature:
    get:
      summary: Retrieve temperature data for all rooms.
      description: Provides temperature measurements in degrees Celsius (°C) to monitor
        indoor climate conditions
      operationId: rooms_temperature_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomTemperature'
                x-content-type: application/json
        "404":
          description: No temperature data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/light:
    get:
      summary: Retrieve light intensity data for all rooms
      description: Fetches the light intensity measurements in lux (lx) for all rooms
        to assess illumination levels
      operationId: rooms_light_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomLight'
                x-content-type: application/json
        "404":
          description: No light data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/humidity:
    get:
      summary: Retrieve humidity data for all rooms
      description: Fetches relative humidity measurements in percentage (%) to assess
        moisture levels in different rooms
      operationId: rooms_humidity_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomHumidity'
                x-content-type: application/json
        "404":
          description: No humidity data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/co2:
    get:
      summary: Retrieve CO2 level data for all rooms.
      description: Provides the CO2 concentration measurements in parts per million
        (ppm) for monitoring air quality in various rooms
      operationId: rooms_co2_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomCo2'
                x-content-type: application/json
        "404":
          description: No co2 data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/noise:
    get:
      summary: Retrieve sound level data for all rooms.
      description: Provides sound level measurements in decibels (dB) to monitor noise
        levels in different rooms.
      operationId: rooms_noise_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomNoise'
                x-content-type: application/json
        "404":
          description: No sound data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/voc:
    get:
      summary: Retrieve VOC concentration data for all rooms.
      description: Fetches the volatile organic compounds (VOC) concentration in micrograms
        per cubic meter (μg/m³) to evaluate indoor air pollution.
      operationId: rooms_voc_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomVoc'
                x-content-type: application/json
        "404":
          description: No VOC data found for any rooms
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rooms/bookings:
    get:
      summary: Get bookings for all rooms
      description: Retrieve booking timestamps for all rooms within a specified time
        interval
      operationId: rooms_bookings_get
      parameters:
      - name: startDate
        in: query
        description: Start date for the booking period (YYYY-MM-DD)
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: days
        in: query
        description: Number of days to retrieve bookings for
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrieved bookings for all rooms
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Booking'
                example:
                  room001:
                  - 2024-12-01 17:30:00
                  - 2024-12-01 16:00:00
                  room002:
                  - 2024-12-02 17:30:00
                x-content-type: application/json
        "400":
          description: Google Calendar API error
        "500":
          description: Internal server error
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/aq_pm2_5:
    get:
      summary: Get air quality data for a specific room (i.e. pm2.5)
      description: "Fetches the air quality measurements, including particulate matter\
        \ (μg/m³) for smaller particles (i.e. pm2.5) of a single room"
      operationId: room_id_aq_pm2_5_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAirQuality25'
        "404":
          description: No airquality data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/aq_pm10:
    get:
      summary: Get air quality data for a specific room (i.e. pm10)
      description: "Fetches the air quality measurements, including particulate matter\
        \ (μg/m³) for smaller particles (i.e. pm10) of a single room"
      operationId: room_id_aq_pm10_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAirQuality10'
        "404":
          description: No airquality data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/temperature:
    get:
      summary: Retrieve temperature data for a specific room
      description: Provides temperature measurements in degrees Celsius (°C) to monitor
        indoor climate conditions for a specific room.
      operationId: room_id_temperature_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomTemperature'
        "404":
          description: No temperature data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/humidity:
    get:
      summary: Retrieve humidity data for a specific room.
      description: Fetches relative humidity measurements in percentage (%) to assess
        moisture level in a specific room.
      operationId: room_id_humidity_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomHumidity'
        "404":
          description: No humidity data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/light:
    get:
      summary: Get light data for a specific room
      description: Retrieve light measurements for a specific room
      operationId: room_id_light_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomLight'
        "404":
          description: No light data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/co2:
    get:
      summary: Get co2 data for a specific room
      description: Retrieve co2 measurements for a specific room
      operationId: room_id_co2_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomCo2'
        "404":
          description: No co2 data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/noise:
    get:
      summary: Get noise/sound data for a specific room
      description: Retrieve noise/sound measurements for a specific room
      operationId: room_id_noise_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomNoise'
        "404":
          description: No sound data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/voc:
    get:
      summary: Get voc data for a specific room
      description: Retrieve voc measurements for a specific room
      operationId: room_id_voc_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomVoc'
        "404":
          description: No Voc data found for the given room
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /{room_id}/bookings:
    get:
      summary: Get bookings for specific room
      description: Retrieve booking timestamps for a specific room within a specified
        time interval
      operationId: room_id_bookings_get
      parameters:
      - name: room_id
        in: path
        description: Unique identifier for the room
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: startDate
        in: query
        description: Start date for the booking period (YYYY-MM-DD)
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: days
        in: query
        description: Number of days to retrieve bookings for
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrieved bookings for the specified room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Internal server error
        "500":
          description: Internal server error
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    RoomData:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        temperature:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureReading'
        pm2_5:
          type: array
          items:
            $ref: '#/components/schemas/AirQuality25Reading'
        pm10:
          type: array
          items:
            $ref: '#/components/schemas/AirQuality10Reading'
        co2:
          type: array
          items:
            $ref: '#/components/schemas/Co2Reading'
        noise:
          type: array
          items:
            $ref: '#/components/schemas/NoiseReading'
        voc:
          type: array
          items:
            $ref: '#/components/schemas/VocReading'
        light:
          type: array
          items:
            $ref: '#/components/schemas/LightReading'
        humidity:
          type: array
          items:
            $ref: '#/components/schemas/HumidityReading'
      example:
        light:
        - value: 7.061401241503109105224211816675961017608642578125
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 7.061401241503109105224211816675961017608642578125
          timestamp: 2000-01-23T04:56:07.000+00:00
        pm2_5:
        - value: 6.0274563
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 6.0274563
          timestamp: 2000-01-23T04:56:07.000+00:00
        co2:
        - value: 5.962133916683182377482808078639209270477294921875
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 5.962133916683182377482808078639209270477294921875
          timestamp: 2000-01-23T04:56:07.000+00:00
        temperature:
        - value: 0.8008282
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 0.8008282
          timestamp: 2000-01-23T04:56:07.000+00:00
        pm10:
        - value: 1.4658129
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 1.4658129
          timestamp: 2000-01-23T04:56:07.000+00:00
        noise:
        - value: 5.63737665663332876420099637471139430999755859375
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 5.63737665663332876420099637471139430999755859375
          timestamp: 2000-01-23T04:56:07.000+00:00
        humidity:
        - value: 9.301444243932575517419536481611430644989013671875
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 9.301444243932575517419536481611430644989013671875
          timestamp: 2000-01-23T04:56:07.000+00:00
        voc:
        - value: 2.3021358869347654518833223846741020679473876953125
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 2.3021358869347654518833223846741020679473876953125
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomEquipment:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        equipment:
          $ref: '#/components/schemas/Equipments'
      example:
        equipment:
          computer-class: true
          blackboard: true
          pc: true
          projector: true
          smartboard: true
          microphone: true
          whiteboard: true
          capacity: 0.80082819046101150206595775671303272247314453125
        room: room
    RoomTemperature:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        temperature:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureReading'
      example:
        temperature:
        - value: 0.8008282
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 0.8008282
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomAirQuality25:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        airquality:
          type: array
          items:
            $ref: '#/components/schemas/AirQuality25Reading'
      example:
        airquality:
        - value: 6.0274563
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 6.0274563
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomAirQuality10:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        airquality:
          type: array
          items:
            $ref: '#/components/schemas/AirQuality10Reading'
      example:
        airquality:
        - value: 1.4658129
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 1.4658129
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomCo2:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        airquality:
          type: array
          items:
            $ref: '#/components/schemas/Co2Reading'
      example:
        airquality:
        - value: 5.962133916683182377482808078639209270477294921875
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 5.962133916683182377482808078639209270477294921875
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomNoise:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        airquality:
          type: array
          items:
            $ref: '#/components/schemas/NoiseReading'
      example:
        airquality:
        - value: 5.63737665663332876420099637471139430999755859375
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 5.63737665663332876420099637471139430999755859375
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomVoc:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        airquality:
          type: array
          items:
            $ref: '#/components/schemas/VocReading'
      example:
        airquality:
        - value: 2.3021358869347654518833223846741020679473876953125
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 2.3021358869347654518833223846741020679473876953125
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomLight:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        light:
          type: array
          items:
            $ref: '#/components/schemas/LightReading'
      example:
        light:
        - value: 7.061401241503109105224211816675961017608642578125
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 7.061401241503109105224211816675961017608642578125
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    RoomHumidity:
      type: object
      properties:
        room:
          type: string
          description: Room identifier
        humidity:
          type: array
          items:
            $ref: '#/components/schemas/HumidityReading'
      example:
        humidity:
        - value: 9.301444243932575517419536481611430644989013671875
          timestamp: 2000-01-23T04:56:07.000+00:00
        - value: 9.301444243932575517419536481611430644989013671875
          timestamp: 2000-01-23T04:56:07.000+00:00
        room: room
    Equipments:
      type: object
      properties:
        capacity:
          type: number
          description: Number of seats
          format: integer
        projector:
          type: boolean
          description: Status if there is a projector in the room
        pc:
          type: boolean
          description: If the room contains a computer for the teacher
        computer-class:
          type: boolean
          description: If the room is a computer class. If this is the case the capacity
            equals to the amount of computers
        microphone:
          type: boolean
          description: If the room has a microphone
        smartboard:
          type: boolean
          description: If the room contains a smartboard with capabilities of doing
            a remote/virtual class
        blackboard:
          type: boolean
          description: If the room has a blackboard
        whiteboard:
          type: boolean
          description: If the room has a whiteboard
      example:
        computer-class: true
        blackboard: true
        pc: true
        projector: true
        smartboard: true
        microphone: true
        whiteboard: true
        capacity: 0.80082819046101150206595775671303272247314453125
    TemperatureReading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the temperature reading
          format: date-time
        value:
          type: number
          description: Temperature value in Celsius
          format: float
      example:
        value: 0.8008282
        timestamp: 2000-01-23T04:56:07.000+00:00
    AirQuality25Reading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the airquality-pm2.5 reading
          format: date-time
        value:
          type: number
          description: Airquality including particulate matter (μg/m³) w.r.t smaller
            particles (i.e. pm2.5)
          format: float
      example:
        value: 6.0274563
        timestamp: 2000-01-23T04:56:07.000+00:00
    AirQuality10Reading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the airquality-pm10 reading
          format: date-time
        value:
          type: number
          description: Airquality including particulate matter (μg/m³) w.r.t larger
            particles (i.e. pm10)
          format: float
      example:
        value: 1.4658129
        timestamp: 2000-01-23T04:56:07.000+00:00
    Co2Reading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the co2 reading
          format: date-time
        value:
          type: number
          description: Concentration of carbon dioxide in parts per million (ppm)
      example:
        value: 5.962133916683182377482808078639209270477294921875
        timestamp: 2000-01-23T04:56:07.000+00:00
    NoiseReading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the sound reading
          format: date-time
        value:
          type: number
          description: Measures sound levels in decibels (dB)
      example:
        value: 5.63737665663332876420099637471139430999755859375
        timestamp: 2000-01-23T04:56:07.000+00:00
    VocReading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the voc reading
          format: date-time
        value:
          type: number
          description: Concentration of volatile organic compounds in micrograms per
            cubic meter (μg/m³)
      example:
        value: 2.3021358869347654518833223846741020679473876953125
        timestamp: 2000-01-23T04:56:07.000+00:00
    LightReading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the light reading
          format: date-time
        value:
          type: number
          description: Amount of light falling on a surface in lux = lumen/m2
      example:
        value: 7.061401241503109105224211816675961017608642578125
        timestamp: 2000-01-23T04:56:07.000+00:00
    HumidityReading:
      type: object
      properties:
        timestamp:
          type: string
          description: Time of the humidity reading
          format: date-time
        value:
          type: number
          description: amount of water vapor in the air relative to the maximum amount
            the air can hold at a given temperature in percent %
      example:
        value: 9.301444243932575517419536481611430644989013671875
        timestamp: 2000-01-23T04:56:07.000+00:00
    Booking:
      type: string
      format: date-time
    book_room_id_body:
      type: object
      properties:
        responsible:
          type: string
          description: Name or identifier of the person responsible for the booking
          example: John Doe
        description:
          type: string
          description: "Description of the booking (e.g., course name)"
          example: Math 101
        start_timestamp:
          type: string
          description: Start timestamp for the booking in format "%Y-%m-%d %H-%M-%S"
          format: date-time
    inline_response_200:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Room booked successfully.
      example:
        message: Room booked successfully.
        status: success
    inline_response_400:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Invalid request data.
    inline_response_409:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Room is already booked for the specified time slot.
    inline_response_500:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: An unexpected error occurred.
    inline_response_200_1:
      type: object
      properties:
        room_id:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
      example:
        room001:
        - 2024-12-01 17:30:00
        - 2024-12-01 16:00:00

