# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HumidityReading(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, timestamp: datetime=None, lumen: float=None):  # noqa: E501
        """HumidityReading - a model defined in Swagger

        :param timestamp: The timestamp of this HumidityReading.  # noqa: E501
        :type timestamp: datetime
        :param lumen: The lumen of this HumidityReading.  # noqa: E501
        :type lumen: float
        """
        self.swagger_types = {
            'timestamp': datetime,
            'lumen': float
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'lumen': 'lumen'
        }
        self._timestamp = timestamp
        self._lumen = lumen

    @classmethod
    def from_dict(cls, dikt) -> 'HumidityReading':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HumidityReading of this HumidityReading.  # noqa: E501
        :rtype: HumidityReading
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this HumidityReading.

        Time of the humidity reading  # noqa: E501

        :return: The timestamp of this HumidityReading.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this HumidityReading.

        Time of the humidity reading  # noqa: E501

        :param timestamp: The timestamp of this HumidityReading.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def lumen(self) -> float:
        """Gets the lumen of this HumidityReading.

        amount of water vapor in the air relative to the maximum amount the air can hold at a given temperature in percent %  # noqa: E501

        :return: The lumen of this HumidityReading.
        :rtype: float
        """
        return self._lumen

    @lumen.setter
    def lumen(self, lumen: float):
        """Sets the lumen of this HumidityReading.

        amount of water vapor in the air relative to the maximum amount the air can hold at a given temperature in percent %  # noqa: E501

        :param lumen: The lumen of this HumidityReading.
        :type lumen: float
        """

        self._lumen = lumen
